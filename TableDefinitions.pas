//------------------------------------------------------------------------------
// <autogenerated>
//     This Oxygene source code was generated by a tool.
//     Oxygene Version: 5.0.30.968
//     Runtime Version: 4.0.30319.239
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// #DASCHEMA:"R:\test\RemObjects.Calendar\Calendar.daSchema"
{$HIDE H7}
{$HIDE W1}
{$HIDE W27}
{$HIDE H11}

namespace RemObjects.Calendar.Calendar;
 
interface

type
  [RemObjects.DataAbstract.Linq.TableName('Alarms')]
  [System.CodeDom.Compiler.GeneratedCodeAttribute('DA LINQ TableDefinitions Generator', '6.0.0.970')]
  Alarms = public partial class(System.ICloneable, System.ComponentModel.INotifyPropertyChanged, System.ComponentModel.INotifyPropertyChanging)
  private 
    method System_ICloneable_Clone: System.Object; implements System.ICloneable.Clone;
    var f____ID: System.Int64;
    method set_ID(value: System.Int64);
    var f____EventID: System.Int64;
    method set_EventID(value: System.Int64);
    var f____Summary: System.String;
    method set_Summary(value: System.String);
    var f____Description: System.String;
    method set_Description(value: System.String);
    var f____Repeat: System.Int32;
    method set_Repeat(value: System.Int32);
    var f____Time: nullable System.DateTime;
    method set_Time(value: nullable System.DateTime);
    var f____RelativeTime: nullable System.Int32;
    method set_RelativeTime(value: nullable System.Int32);
    var f____TriggerRelation: System.Int32;
    method set_TriggerRelation(value: System.Int32);
  protected 
    var m____OldValues: Alarms;
    method OnPropertyChanging(parameterName: System.String); virtual;
    method OnPropertyChanged(parameterName: System.String); virtual;
  public 
    event PropertyChanged: System.ComponentModel.PropertyChangedEventHandler; virtual;
    method BeginUpdate; virtual;
    method EndUpdate(dataAdapter: RemObjects.DataAbstract.Linq.LinqDataAdapter); virtual;
    method CancelUpdate; virtual;
    event PropertyChanging: System.ComponentModel.PropertyChangingEventHandler; virtual;
    [RemObjects.DataAbstract.Linq.FieldName('ID')]
    [RemObjects.DataAbstract.Linq.DataType(RemObjects.DataAbstract.Schema.DataType.LargeAutoInc)]
    [RemObjects.DataAbstract.Linq.PrimaryKey]
    [RemObjects.DataAbstract.Linq.LogChanges]
    property ID: System.Int64 read f____ID write set_ID; virtual;
    [RemObjects.DataAbstract.Linq.FieldName('EventID')]
    [RemObjects.DataAbstract.Linq.DataType(RemObjects.DataAbstract.Schema.DataType.LargeInt)]
    [RemObjects.DataAbstract.Linq.LogChanges]
    property EventID: System.Int64 read f____EventID write set_EventID; virtual;
    [RemObjects.DataAbstract.Linq.FieldName('Summary')]
    [RemObjects.DataAbstract.Linq.DataType(RemObjects.DataAbstract.Schema.DataType.WideMemo)]
    [RemObjects.DataAbstract.Linq.LogChanges]
    property Summary: System.String read f____Summary write set_Summary; virtual;
    [RemObjects.DataAbstract.Linq.FieldName('Description')]
    [RemObjects.DataAbstract.Linq.DataType(RemObjects.DataAbstract.Schema.DataType.WideMemo)]
    [RemObjects.DataAbstract.Linq.LogChanges]
    property Description: System.String read f____Description write set_Description; virtual;
    [RemObjects.DataAbstract.Linq.FieldName('Repeat')]
    [RemObjects.DataAbstract.Linq.DataType(RemObjects.DataAbstract.Schema.DataType.Integer)]
    [RemObjects.DataAbstract.Linq.LogChanges]
    property &Repeat: System.Int32 read f____Repeat write set_Repeat; virtual;
    [RemObjects.DataAbstract.Linq.FieldName('Time')]
    [RemObjects.DataAbstract.Linq.DataType(RemObjects.DataAbstract.Schema.DataType.DateTime)]
    [RemObjects.DataAbstract.Linq.LogChanges]
    property Time: nullable System.DateTime read f____Time write set_Time; virtual;
    [RemObjects.DataAbstract.Linq.FieldName('RelativeTime')]
    [RemObjects.DataAbstract.Linq.DataType(RemObjects.DataAbstract.Schema.DataType.Integer)]
    [RemObjects.DataAbstract.Linq.LogChanges]
    property RelativeTime: nullable System.Int32 read f____RelativeTime write set_RelativeTime; virtual;
    [RemObjects.DataAbstract.Linq.FieldName('TriggerRelation')]
    [RemObjects.DataAbstract.Linq.DataType(RemObjects.DataAbstract.Schema.DataType.Integer)]
    [RemObjects.DataAbstract.Linq.LogChanges]
    property TriggerRelation: System.Int32 read f____TriggerRelation write set_TriggerRelation; virtual;
  end;
  
  [RemObjects.DataAbstract.Linq.TableName('Calendars')]
  [System.CodeDom.Compiler.GeneratedCodeAttribute('DA LINQ TableDefinitions Generator', '6.0.0.970')]
  Calendars = public partial class(System.ICloneable, System.ComponentModel.INotifyPropertyChanged, System.ComponentModel.INotifyPropertyChanging)
  private 
    method System_ICloneable_Clone: System.Object; implements System.ICloneable.Clone;
    var f____ID: System.Int64;
    method set_ID(value: System.Int64);
    var f____Name: System.String;
    method set_Name(value: System.String);
    var f____Description: System.String;
    method set_Description(value: System.String);
    var f____Group: System.Boolean;
    method set_Group(value: System.Boolean);
    var f____LdapGroup: System.String;
    method set_LdapGroup(value: System.String);
    var f____DisplayName: System.String;
    method set_DisplayName(value: System.String);
    var f____Order: System.Int32;
    method set_Order(value: System.Int32);
    var f____Color: System.String;
    method set_Color(value: System.String);
    var f____CTag: System.String;
    method set_CTag(value: System.String);
  protected 
    var m____OldValues: Calendars;
    method OnPropertyChanging(parameterName: System.String); virtual;
    method OnPropertyChanged(parameterName: System.String); virtual;
  public 
    event PropertyChanged: System.ComponentModel.PropertyChangedEventHandler; virtual;
    method BeginUpdate; virtual;
    method EndUpdate(dataAdapter: RemObjects.DataAbstract.Linq.LinqDataAdapter); virtual;
    method CancelUpdate; virtual;
    event PropertyChanging: System.ComponentModel.PropertyChangingEventHandler; virtual;
    [RemObjects.DataAbstract.Linq.FieldName('ID')]
    [RemObjects.DataAbstract.Linq.DataType(RemObjects.DataAbstract.Schema.DataType.LargeAutoInc)]
    [RemObjects.DataAbstract.Linq.PrimaryKey]
    [RemObjects.DataAbstract.Linq.LogChanges]
    property ID: System.Int64 read f____ID write set_ID; virtual;
    [RemObjects.DataAbstract.Linq.FieldName('Name')]
    [RemObjects.DataAbstract.Linq.DataType(RemObjects.DataAbstract.Schema.DataType.WideString)]
    [RemObjects.DataAbstract.Linq.LogChanges]
    property Name: System.String read f____Name write set_Name; virtual;
    [RemObjects.DataAbstract.Linq.FieldName('Description')]
    [RemObjects.DataAbstract.Linq.DataType(RemObjects.DataAbstract.Schema.DataType.WideMemo)]
    [RemObjects.DataAbstract.Linq.LogChanges]
    property Description: System.String read f____Description write set_Description; virtual;
    [RemObjects.DataAbstract.Linq.FieldName('Group')]
    [RemObjects.DataAbstract.Linq.DataType(RemObjects.DataAbstract.Schema.DataType.Boolean)]
    [RemObjects.DataAbstract.Linq.LogChanges]
    property &Group: System.Boolean read f____Group write set_Group; virtual;
    [RemObjects.DataAbstract.Linq.FieldName('LdapGroup')]
    [RemObjects.DataAbstract.Linq.DataType(RemObjects.DataAbstract.Schema.DataType.WideString)]
    [RemObjects.DataAbstract.Linq.LogChanges]
    property LdapGroup: System.String read f____LdapGroup write set_LdapGroup; virtual;
    [RemObjects.DataAbstract.Linq.FieldName('DisplayName')]
    [RemObjects.DataAbstract.Linq.DataType(RemObjects.DataAbstract.Schema.DataType.WideString)]
    [RemObjects.DataAbstract.Linq.LogChanges]
    property DisplayName: System.String read f____DisplayName write set_DisplayName; virtual;
    [RemObjects.DataAbstract.Linq.FieldName('Order')]
    [RemObjects.DataAbstract.Linq.DataType(RemObjects.DataAbstract.Schema.DataType.Integer)]
    [RemObjects.DataAbstract.Linq.LogChanges]
    property &Order: System.Int32 read f____Order write set_Order; virtual;
    [RemObjects.DataAbstract.Linq.FieldName('Color')]
    [RemObjects.DataAbstract.Linq.DataType(RemObjects.DataAbstract.Schema.DataType.WideString)]
    [RemObjects.DataAbstract.Linq.LogChanges]
    property Color: System.String read f____Color write set_Color; virtual;
    [RemObjects.DataAbstract.Linq.FieldName('CTag')]
    [RemObjects.DataAbstract.Linq.DataType(RemObjects.DataAbstract.Schema.DataType.WideString)]
    [RemObjects.DataAbstract.Linq.LogChanges]
    property CTag: System.String read f____CTag write set_CTag; virtual;
  end;
  
  [RemObjects.DataAbstract.Linq.TableName('Events')]
  [System.CodeDom.Compiler.GeneratedCodeAttribute('DA LINQ TableDefinitions Generator', '6.0.0.970')]
  Events = public partial class(System.ICloneable, System.ComponentModel.INotifyPropertyChanged, System.ComponentModel.INotifyPropertyChanging)
  private 
    method System_ICloneable_Clone: System.Object; implements System.ICloneable.Clone;
    var f____ID: System.Int64;
    method set_ID(value: System.Int64);
    var f____CalendarID: System.Int64;
    method set_CalendarID(value: System.Int64);
    var f____DTStart: System.DateTime;
    method set_DTStart(value: System.DateTime);
    var f____DTEnd: System.DateTime;
    method set_DTEnd(value: System.DateTime);
    var f____TimeZone: System.String;
    method set_TimeZone(value: System.String);
    var f____Location: System.String;
    method set_Location(value: System.String);
    var f____GEOLat: nullable System.Double;
    method set_GEOLat(value: nullable System.Double);
    var f____GEOLon: nullable System.Double;
    method set_GEOLon(value: nullable System.Double);
    var f____Status: System.Int32;
    method set_Status(value: System.Int32);
    var f____Created: System.DateTime;
    method set_Created(value: System.DateTime);
    var f____LastUpdated: System.DateTime;
    method set_LastUpdated(value: System.DateTime);
    var f____Resources: System.String;
    method set_Resources(value: System.String);
    var f____Categories: System.String;
    method set_Categories(value: System.String);
    var f____Description: System.String;
    method set_Description(value: System.String);
    var f____Priority: System.Int32;
    method set_Priority(value: System.Int32);
    var f____Summary: System.String;
    method set_Summary(value: System.String);
    var f____ICSName: System.String;
    method set_ICSName(value: System.String);
    var f____RecurID: nullable System.DateTime;
    method set_RecurID(value: nullable System.DateTime);
    var f____AllDay: System.Boolean;
    method set_AllDay(value: System.Boolean);
    var f____TimeZoneInfo: System.String;
    method set_TimeZoneInfo(value: System.String);
    var f____ETag: System.String;
    method set_ETag(value: System.String);
  protected 
    var m____OldValues: Events;
    method OnPropertyChanging(parameterName: System.String); virtual;
    method OnPropertyChanged(parameterName: System.String); virtual;
  public 
    event PropertyChanged: System.ComponentModel.PropertyChangedEventHandler; virtual;
    method BeginUpdate; virtual;
    method EndUpdate(dataAdapter: RemObjects.DataAbstract.Linq.LinqDataAdapter); virtual;
    method CancelUpdate; virtual;
    event PropertyChanging: System.ComponentModel.PropertyChangingEventHandler; virtual;
    [RemObjects.DataAbstract.Linq.FieldName('ID')]
    [RemObjects.DataAbstract.Linq.DataType(RemObjects.DataAbstract.Schema.DataType.LargeAutoInc)]
    [RemObjects.DataAbstract.Linq.PrimaryKey]
    [RemObjects.DataAbstract.Linq.LogChanges]
    property ID: System.Int64 read f____ID write set_ID; virtual;
    [RemObjects.DataAbstract.Linq.FieldName('CalendarID')]
    [RemObjects.DataAbstract.Linq.DataType(RemObjects.DataAbstract.Schema.DataType.LargeInt)]
    [RemObjects.DataAbstract.Linq.LogChanges]
    property CalendarID: System.Int64 read f____CalendarID write set_CalendarID; virtual;
    [RemObjects.DataAbstract.Linq.FieldName('DTStart')]
    [RemObjects.DataAbstract.Linq.DataType(RemObjects.DataAbstract.Schema.DataType.DateTime)]
    [RemObjects.DataAbstract.Linq.LogChanges]
    property DTStart: System.DateTime read f____DTStart write set_DTStart; virtual;
    [RemObjects.DataAbstract.Linq.FieldName('DTEnd')]
    [RemObjects.DataAbstract.Linq.DataType(RemObjects.DataAbstract.Schema.DataType.DateTime)]
    [RemObjects.DataAbstract.Linq.LogChanges]
    property DTEnd: System.DateTime read f____DTEnd write set_DTEnd; virtual;
    [RemObjects.DataAbstract.Linq.FieldName('TimeZone')]
    [RemObjects.DataAbstract.Linq.DataType(RemObjects.DataAbstract.Schema.DataType.WideString)]
    [RemObjects.DataAbstract.Linq.LogChanges]
    property TimeZone: System.String read f____TimeZone write set_TimeZone; virtual;
    [RemObjects.DataAbstract.Linq.FieldName('Location')]
    [RemObjects.DataAbstract.Linq.DataType(RemObjects.DataAbstract.Schema.DataType.WideMemo)]
    [RemObjects.DataAbstract.Linq.LogChanges]
    property Location: System.String read f____Location write set_Location; virtual;
    [RemObjects.DataAbstract.Linq.FieldName('GEOLat')]
    [RemObjects.DataAbstract.Linq.DataType(RemObjects.DataAbstract.Schema.DataType.Float)]
    [RemObjects.DataAbstract.Linq.LogChanges]
    property GEOLat: nullable System.Double read f____GEOLat write set_GEOLat; virtual;
    [RemObjects.DataAbstract.Linq.FieldName('GEOLon')]
    [RemObjects.DataAbstract.Linq.DataType(RemObjects.DataAbstract.Schema.DataType.Float)]
    [RemObjects.DataAbstract.Linq.LogChanges]
    property GEOLon: nullable System.Double read f____GEOLon write set_GEOLon; virtual;
    [RemObjects.DataAbstract.Linq.FieldName('Status')]
    [RemObjects.DataAbstract.Linq.DataType(RemObjects.DataAbstract.Schema.DataType.Integer)]
    [RemObjects.DataAbstract.Linq.LogChanges]
    property Status: System.Int32 read f____Status write set_Status; virtual;
    [RemObjects.DataAbstract.Linq.FieldName('Created')]
    [RemObjects.DataAbstract.Linq.DataType(RemObjects.DataAbstract.Schema.DataType.DateTime)]
    [RemObjects.DataAbstract.Linq.LogChanges]
    property Created: System.DateTime read f____Created write set_Created; virtual;
    [RemObjects.DataAbstract.Linq.FieldName('LastUpdated')]
    [RemObjects.DataAbstract.Linq.DataType(RemObjects.DataAbstract.Schema.DataType.DateTime)]
    [RemObjects.DataAbstract.Linq.LogChanges]
    property LastUpdated: System.DateTime read f____LastUpdated write set_LastUpdated; virtual;
    [RemObjects.DataAbstract.Linq.FieldName('Resources')]
    [RemObjects.DataAbstract.Linq.DataType(RemObjects.DataAbstract.Schema.DataType.WideMemo)]
    [RemObjects.DataAbstract.Linq.LogChanges]
    property Resources: System.String read f____Resources write set_Resources; virtual;
    [RemObjects.DataAbstract.Linq.FieldName('Categories')]
    [RemObjects.DataAbstract.Linq.DataType(RemObjects.DataAbstract.Schema.DataType.WideMemo)]
    [RemObjects.DataAbstract.Linq.LogChanges]
    property Categories: System.String read f____Categories write set_Categories; virtual;
    [RemObjects.DataAbstract.Linq.FieldName('Description')]
    [RemObjects.DataAbstract.Linq.DataType(RemObjects.DataAbstract.Schema.DataType.WideMemo)]
    [RemObjects.DataAbstract.Linq.LogChanges]
    property Description: System.String read f____Description write set_Description; virtual;
    [RemObjects.DataAbstract.Linq.FieldName('Priority')]
    [RemObjects.DataAbstract.Linq.DataType(RemObjects.DataAbstract.Schema.DataType.Integer)]
    [RemObjects.DataAbstract.Linq.LogChanges]
    property Priority: System.Int32 read f____Priority write set_Priority; virtual;
    [RemObjects.DataAbstract.Linq.FieldName('Summary')]
    [RemObjects.DataAbstract.Linq.DataType(RemObjects.DataAbstract.Schema.DataType.WideMemo)]
    [RemObjects.DataAbstract.Linq.LogChanges]
    property Summary: System.String read f____Summary write set_Summary; virtual;
    [RemObjects.DataAbstract.Linq.FieldName('ICSName')]
    [RemObjects.DataAbstract.Linq.DataType(RemObjects.DataAbstract.Schema.DataType.WideString)]
    [RemObjects.DataAbstract.Linq.LogChanges]
    property ICSName: System.String read f____ICSName write set_ICSName; virtual;
    [RemObjects.DataAbstract.Linq.FieldName('RecurID')]
    [RemObjects.DataAbstract.Linq.DataType(RemObjects.DataAbstract.Schema.DataType.DateTime)]
    [RemObjects.DataAbstract.Linq.LogChanges]
    property RecurID: nullable System.DateTime read f____RecurID write set_RecurID; virtual;
    [RemObjects.DataAbstract.Linq.FieldName('AllDay')]
    [RemObjects.DataAbstract.Linq.DataType(RemObjects.DataAbstract.Schema.DataType.Boolean)]
    [RemObjects.DataAbstract.Linq.LogChanges]
    property AllDay: System.Boolean read f____AllDay write set_AllDay; virtual;
    [RemObjects.DataAbstract.Linq.FieldName('TimeZoneInfo')]
    [RemObjects.DataAbstract.Linq.DataType(RemObjects.DataAbstract.Schema.DataType.WideMemo)]
    [RemObjects.DataAbstract.Linq.LogChanges]
    property TimeZoneInfo: System.String read f____TimeZoneInfo write set_TimeZoneInfo; virtual;
    [RemObjects.DataAbstract.Linq.FieldName('ETag')]
    [RemObjects.DataAbstract.Linq.DataType(RemObjects.DataAbstract.Schema.DataType.WideString)]
    [RemObjects.DataAbstract.Linq.LogChanges]
    property ETag: System.String read f____ETag write set_ETag; virtual;
  end;
  
  [RemObjects.DataAbstract.Linq.TableName('Recurrences')]
  [System.CodeDom.Compiler.GeneratedCodeAttribute('DA LINQ TableDefinitions Generator', '6.0.0.970')]
  Recurrences = public partial class(System.ICloneable, System.ComponentModel.INotifyPropertyChanged, System.ComponentModel.INotifyPropertyChanging)
  private 
    method System_ICloneable_Clone: System.Object; implements System.ICloneable.Clone;
    var f____ID: System.Int64;
    method set_ID(value: System.Int64);
    var f____EventID: System.Int64;
    method set_EventID(value: System.Int64);
    var f____Value: System.String;
    method set_Value(value: System.String);
  protected 
    var m____OldValues: Recurrences;
    method OnPropertyChanging(parameterName: System.String); virtual;
    method OnPropertyChanged(parameterName: System.String); virtual;
  public 
    event PropertyChanged: System.ComponentModel.PropertyChangedEventHandler; virtual;
    method BeginUpdate; virtual;
    method EndUpdate(dataAdapter: RemObjects.DataAbstract.Linq.LinqDataAdapter); virtual;
    method CancelUpdate; virtual;
    event PropertyChanging: System.ComponentModel.PropertyChangingEventHandler; virtual;
    [RemObjects.DataAbstract.Linq.FieldName('ID')]
    [RemObjects.DataAbstract.Linq.DataType(RemObjects.DataAbstract.Schema.DataType.LargeAutoInc)]
    [RemObjects.DataAbstract.Linq.PrimaryKey]
    [RemObjects.DataAbstract.Linq.LogChanges]
    property ID: System.Int64 read f____ID write set_ID; virtual;
    [RemObjects.DataAbstract.Linq.Relation('Events', 'ID')]
    [RemObjects.DataAbstract.Linq.FieldName('EventID')]
    [RemObjects.DataAbstract.Linq.DataType(RemObjects.DataAbstract.Schema.DataType.LargeInt)]
    [RemObjects.DataAbstract.Linq.LogChanges]
    property EventID: System.Int64 read f____EventID write set_EventID; virtual;
    [RemObjects.DataAbstract.Linq.FieldName('Value')]
    [RemObjects.DataAbstract.Linq.DataType(RemObjects.DataAbstract.Schema.DataType.WideMemo)]
    [RemObjects.DataAbstract.Linq.LogChanges]
    property Value: System.String read f____Value write set_Value; virtual;
  end;
  
  [System.CodeDom.Compiler.GeneratedCodeAttribute('DA LINQ TableDefinitions Generator', '6.0.0.970')]
  DataContext = public partial class
  private 
    var f____Alarms: System.Collections.Generic.IEnumerable<Alarms>;
    var f____Calendars: System.Collections.Generic.IEnumerable<Calendars>;
    var f____Events: System.Collections.Generic.IEnumerable<Events>;
    var f____Recurrences: System.Collections.Generic.IEnumerable<Recurrences>;
  public 
    constructor;
    property Alarms: System.Collections.Generic.IEnumerable<Alarms> read f____Alarms write f____Alarms; virtual;
    property Calendars: System.Collections.Generic.IEnumerable<Calendars> read f____Calendars write f____Calendars; virtual;
    property Events: System.Collections.Generic.IEnumerable<Events> read f____Events write f____Events; virtual;
    property Recurrences: System.Collections.Generic.IEnumerable<Recurrences> read f____Recurrences write f____Recurrences; virtual;
  end;
  
implementation

{ Alarms }

method Alarms.System_ICloneable_Clone: System.Object;
begin
  var v____new: Alarms := new Alarms();
  v____new.f____ID := self.f____ID;
  v____new.f____EventID := self.f____EventID;
  v____new.f____Summary := self.f____Summary;
  v____new.f____Description := self.f____Description;
  v____new.f____Repeat := self.f____Repeat;
  v____new.f____Time := self.f____Time;
  v____new.f____RelativeTime := self.f____RelativeTime;
  v____new.f____TriggerRelation := self.f____TriggerRelation;
  exit(v____new);
end;

method Alarms.BeginUpdate;
begin
  self.m____OldValues := ((self as System.ICloneable).Clone() as Alarms);
end;

method Alarms.EndUpdate(dataAdapter: RemObjects.DataAbstract.Linq.LinqDataAdapter);
begin
  dataAdapter.UpdateRow<Alarms>(self.m____OldValues, self);
  self.m____OldValues := nil;
end;

method Alarms.CancelUpdate;
begin
  self.m____OldValues := nil;
end;

method Alarms.OnPropertyChanging(parameterName: System.String);
begin
  if (self.PropertyChanging <> nil) then begin
    self.PropertyChanging(self, new System.ComponentModel.PropertyChangingEventArgs(parameterName));
  end;
end;

method Alarms.OnPropertyChanged(parameterName: System.String);
begin
  if ((self.PropertyChanged <> nil) 
        and (self.m____OldValues = nil)) then begin
    self.PropertyChanged(self, new System.ComponentModel.PropertyChangedEventArgs(parameterName));
  end;
end;

method Alarms.set_ID(value: System.Int64);
begin
  if (System.Collections.Generic.Comparer<System.Int64>.Default.Compare(self.f____ID, value) <> 0) then begin
    self.OnPropertyChanging('ID');
    f____ID := value;
    self.OnPropertyChanged('ID');
  end;
end;

method Alarms.set_EventID(value: System.Int64);
begin
  if (System.Collections.Generic.Comparer<System.Int64>.Default.Compare(self.f____EventID, value) <> 0) then begin
    self.OnPropertyChanging('EventID');
    f____EventID := value;
    self.OnPropertyChanged('EventID');
  end;
end;

method Alarms.set_Summary(value: System.String);
begin
  if (System.Collections.Generic.Comparer<System.String>.Default.Compare(self.f____Summary, value) <> 0) then begin
    self.OnPropertyChanging('Summary');
    f____Summary := value;
    self.OnPropertyChanged('Summary');
  end;
end;

method Alarms.set_Description(value: System.String);
begin
  if (System.Collections.Generic.Comparer<System.String>.Default.Compare(self.f____Description, value) <> 0) then begin
    self.OnPropertyChanging('Description');
    f____Description := value;
    self.OnPropertyChanged('Description');
  end;
end;

method Alarms.set_Repeat(value: System.Int32);
begin
  if (System.Collections.Generic.Comparer<System.Int32>.Default.Compare(self.f____Repeat, value) <> 0) then begin
    self.OnPropertyChanging('Repeat');
    f____Repeat := value;
    self.OnPropertyChanged('Repeat');
  end;
end;

method Alarms.set_Time(value: nullable System.DateTime);
begin
  if (System.Collections.Generic.Comparer<nullable System.DateTime>.Default.Compare(self.f____Time, value) <> 0) then begin
    self.OnPropertyChanging('Time');
    f____Time := value;
    self.OnPropertyChanged('Time');
  end;
end;

method Alarms.set_RelativeTime(value: nullable System.Int32);
begin
  if (System.Collections.Generic.Comparer<nullable System.Int32>.Default.Compare(self.f____RelativeTime, value) <> 0) then begin
    self.OnPropertyChanging('RelativeTime');
    f____RelativeTime := value;
    self.OnPropertyChanged('RelativeTime');
  end;
end;

method Alarms.set_TriggerRelation(value: System.Int32);
begin
  if (System.Collections.Generic.Comparer<System.Int32>.Default.Compare(self.f____TriggerRelation, value) <> 0) then begin
    self.OnPropertyChanging('TriggerRelation');
    f____TriggerRelation := value;
    self.OnPropertyChanged('TriggerRelation');
  end;
end;

{ Calendars }

method Calendars.System_ICloneable_Clone: System.Object;
begin
  var v____new: Calendars := new Calendars();
  v____new.f____ID := self.f____ID;
  v____new.f____Name := self.f____Name;
  v____new.f____Description := self.f____Description;
  v____new.f____Group := self.f____Group;
  v____new.f____LdapGroup := self.f____LdapGroup;
  v____new.f____DisplayName := self.f____DisplayName;
  v____new.f____Order := self.f____Order;
  v____new.f____Color := self.f____Color;
  v____new.f____CTag := self.f____CTag;
  exit(v____new);
end;

method Calendars.BeginUpdate;
begin
  self.m____OldValues := ((self as System.ICloneable).Clone() as Calendars);
end;

method Calendars.EndUpdate(dataAdapter: RemObjects.DataAbstract.Linq.LinqDataAdapter);
begin
  dataAdapter.UpdateRow<Calendars>(self.m____OldValues, self);
  self.m____OldValues := nil;
end;

method Calendars.CancelUpdate;
begin
  self.m____OldValues := nil;
end;

method Calendars.OnPropertyChanging(parameterName: System.String);
begin
  if (self.PropertyChanging <> nil) then begin
    self.PropertyChanging(self, new System.ComponentModel.PropertyChangingEventArgs(parameterName));
  end;
end;

method Calendars.OnPropertyChanged(parameterName: System.String);
begin
  if ((self.PropertyChanged <> nil) 
        and (self.m____OldValues = nil)) then begin
    self.PropertyChanged(self, new System.ComponentModel.PropertyChangedEventArgs(parameterName));
  end;
end;

method Calendars.set_ID(value: System.Int64);
begin
  if (System.Collections.Generic.Comparer<System.Int64>.Default.Compare(self.f____ID, value) <> 0) then begin
    self.OnPropertyChanging('ID');
    f____ID := value;
    self.OnPropertyChanged('ID');
  end;
end;

method Calendars.set_Name(value: System.String);
begin
  if (System.Collections.Generic.Comparer<System.String>.Default.Compare(self.f____Name, value) <> 0) then begin
    self.OnPropertyChanging('Name');
    f____Name := value;
    self.OnPropertyChanged('Name');
  end;
end;

method Calendars.set_Description(value: System.String);
begin
  if (System.Collections.Generic.Comparer<System.String>.Default.Compare(self.f____Description, value) <> 0) then begin
    self.OnPropertyChanging('Description');
    f____Description := value;
    self.OnPropertyChanged('Description');
  end;
end;

method Calendars.set_Group(value: System.Boolean);
begin
  if (System.Collections.Generic.Comparer<System.Boolean>.Default.Compare(self.f____Group, value) <> 0) then begin
    self.OnPropertyChanging('Group');
    f____Group := value;
    self.OnPropertyChanged('Group');
  end;
end;

method Calendars.set_LdapGroup(value: System.String);
begin
  if (System.Collections.Generic.Comparer<System.String>.Default.Compare(self.f____LdapGroup, value) <> 0) then begin
    self.OnPropertyChanging('LdapGroup');
    f____LdapGroup := value;
    self.OnPropertyChanged('LdapGroup');
  end;
end;

method Calendars.set_DisplayName(value: System.String);
begin
  if (System.Collections.Generic.Comparer<System.String>.Default.Compare(self.f____DisplayName, value) <> 0) then begin
    self.OnPropertyChanging('DisplayName');
    f____DisplayName := value;
    self.OnPropertyChanged('DisplayName');
  end;
end;

method Calendars.set_Order(value: System.Int32);
begin
  if (System.Collections.Generic.Comparer<System.Int32>.Default.Compare(self.f____Order, value) <> 0) then begin
    self.OnPropertyChanging('Order');
    f____Order := value;
    self.OnPropertyChanged('Order');
  end;
end;

method Calendars.set_Color(value: System.String);
begin
  if (System.Collections.Generic.Comparer<System.String>.Default.Compare(self.f____Color, value) <> 0) then begin
    self.OnPropertyChanging('Color');
    f____Color := value;
    self.OnPropertyChanged('Color');
  end;
end;

method Calendars.set_CTag(value: System.String);
begin
  if (System.Collections.Generic.Comparer<System.String>.Default.Compare(self.f____CTag, value) <> 0) then begin
    self.OnPropertyChanging('CTag');
    f____CTag := value;
    self.OnPropertyChanged('CTag');
  end;
end;

{ Events }

method Events.System_ICloneable_Clone: System.Object;
begin
  var v____new: Events := new Events();
  v____new.f____ID := self.f____ID;
  v____new.f____CalendarID := self.f____CalendarID;
  v____new.f____DTStart := self.f____DTStart;
  v____new.f____DTEnd := self.f____DTEnd;
  v____new.f____TimeZone := self.f____TimeZone;
  v____new.f____Location := self.f____Location;
  v____new.f____GEOLat := self.f____GEOLat;
  v____new.f____GEOLon := self.f____GEOLon;
  v____new.f____Status := self.f____Status;
  v____new.f____Created := self.f____Created;
  v____new.f____LastUpdated := self.f____LastUpdated;
  v____new.f____Resources := self.f____Resources;
  v____new.f____Categories := self.f____Categories;
  v____new.f____Description := self.f____Description;
  v____new.f____Priority := self.f____Priority;
  v____new.f____Summary := self.f____Summary;
  v____new.f____ICSName := self.f____ICSName;
  v____new.f____RecurID := self.f____RecurID;
  v____new.f____AllDay := self.f____AllDay;
  v____new.f____TimeZoneInfo := self.f____TimeZoneInfo;
  v____new.f____ETag := self.f____ETag;
  exit(v____new);
end;

method Events.BeginUpdate;
begin
  self.m____OldValues := ((self as System.ICloneable).Clone() as Events);
end;

method Events.EndUpdate(dataAdapter: RemObjects.DataAbstract.Linq.LinqDataAdapter);
begin
  dataAdapter.UpdateRow<Events>(self.m____OldValues, self);
  self.m____OldValues := nil;
end;

method Events.CancelUpdate;
begin
  self.m____OldValues := nil;
end;

method Events.OnPropertyChanging(parameterName: System.String);
begin
  if (self.PropertyChanging <> nil) then begin
    self.PropertyChanging(self, new System.ComponentModel.PropertyChangingEventArgs(parameterName));
  end;
end;

method Events.OnPropertyChanged(parameterName: System.String);
begin
  if ((self.PropertyChanged <> nil) 
        and (self.m____OldValues = nil)) then begin
    self.PropertyChanged(self, new System.ComponentModel.PropertyChangedEventArgs(parameterName));
  end;
end;

method Events.set_ID(value: System.Int64);
begin
  if (System.Collections.Generic.Comparer<System.Int64>.Default.Compare(self.f____ID, value) <> 0) then begin
    self.OnPropertyChanging('ID');
    f____ID := value;
    self.OnPropertyChanged('ID');
  end;
end;

method Events.set_CalendarID(value: System.Int64);
begin
  if (System.Collections.Generic.Comparer<System.Int64>.Default.Compare(self.f____CalendarID, value) <> 0) then begin
    self.OnPropertyChanging('CalendarID');
    f____CalendarID := value;
    self.OnPropertyChanged('CalendarID');
  end;
end;

method Events.set_DTStart(value: System.DateTime);
begin
  if (System.Collections.Generic.Comparer<System.DateTime>.Default.Compare(self.f____DTStart, value) <> 0) then begin
    self.OnPropertyChanging('DTStart');
    f____DTStart := value;
    self.OnPropertyChanged('DTStart');
  end;
end;

method Events.set_DTEnd(value: System.DateTime);
begin
  if (System.Collections.Generic.Comparer<System.DateTime>.Default.Compare(self.f____DTEnd, value) <> 0) then begin
    self.OnPropertyChanging('DTEnd');
    f____DTEnd := value;
    self.OnPropertyChanged('DTEnd');
  end;
end;

method Events.set_TimeZone(value: System.String);
begin
  if (System.Collections.Generic.Comparer<System.String>.Default.Compare(self.f____TimeZone, value) <> 0) then begin
    self.OnPropertyChanging('TimeZone');
    f____TimeZone := value;
    self.OnPropertyChanged('TimeZone');
  end;
end;

method Events.set_Location(value: System.String);
begin
  if (System.Collections.Generic.Comparer<System.String>.Default.Compare(self.f____Location, value) <> 0) then begin
    self.OnPropertyChanging('Location');
    f____Location := value;
    self.OnPropertyChanged('Location');
  end;
end;

method Events.set_GEOLat(value: nullable System.Double);
begin
  if (System.Collections.Generic.Comparer<nullable System.Double>.Default.Compare(self.f____GEOLat, value) <> 0) then begin
    self.OnPropertyChanging('GEOLat');
    f____GEOLat := value;
    self.OnPropertyChanged('GEOLat');
  end;
end;

method Events.set_GEOLon(value: nullable System.Double);
begin
  if (System.Collections.Generic.Comparer<nullable System.Double>.Default.Compare(self.f____GEOLon, value) <> 0) then begin
    self.OnPropertyChanging('GEOLon');
    f____GEOLon := value;
    self.OnPropertyChanged('GEOLon');
  end;
end;

method Events.set_Status(value: System.Int32);
begin
  if (System.Collections.Generic.Comparer<System.Int32>.Default.Compare(self.f____Status, value) <> 0) then begin
    self.OnPropertyChanging('Status');
    f____Status := value;
    self.OnPropertyChanged('Status');
  end;
end;

method Events.set_Created(value: System.DateTime);
begin
  if (System.Collections.Generic.Comparer<System.DateTime>.Default.Compare(self.f____Created, value) <> 0) then begin
    self.OnPropertyChanging('Created');
    f____Created := value;
    self.OnPropertyChanged('Created');
  end;
end;

method Events.set_LastUpdated(value: System.DateTime);
begin
  if (System.Collections.Generic.Comparer<System.DateTime>.Default.Compare(self.f____LastUpdated, value) <> 0) then begin
    self.OnPropertyChanging('LastUpdated');
    f____LastUpdated := value;
    self.OnPropertyChanged('LastUpdated');
  end;
end;

method Events.set_Resources(value: System.String);
begin
  if (System.Collections.Generic.Comparer<System.String>.Default.Compare(self.f____Resources, value) <> 0) then begin
    self.OnPropertyChanging('Resources');
    f____Resources := value;
    self.OnPropertyChanged('Resources');
  end;
end;

method Events.set_Categories(value: System.String);
begin
  if (System.Collections.Generic.Comparer<System.String>.Default.Compare(self.f____Categories, value) <> 0) then begin
    self.OnPropertyChanging('Categories');
    f____Categories := value;
    self.OnPropertyChanged('Categories');
  end;
end;

method Events.set_Description(value: System.String);
begin
  if (System.Collections.Generic.Comparer<System.String>.Default.Compare(self.f____Description, value) <> 0) then begin
    self.OnPropertyChanging('Description');
    f____Description := value;
    self.OnPropertyChanged('Description');
  end;
end;

method Events.set_Priority(value: System.Int32);
begin
  if (System.Collections.Generic.Comparer<System.Int32>.Default.Compare(self.f____Priority, value) <> 0) then begin
    self.OnPropertyChanging('Priority');
    f____Priority := value;
    self.OnPropertyChanged('Priority');
  end;
end;

method Events.set_Summary(value: System.String);
begin
  if (System.Collections.Generic.Comparer<System.String>.Default.Compare(self.f____Summary, value) <> 0) then begin
    self.OnPropertyChanging('Summary');
    f____Summary := value;
    self.OnPropertyChanged('Summary');
  end;
end;

method Events.set_ICSName(value: System.String);
begin
  if (System.Collections.Generic.Comparer<System.String>.Default.Compare(self.f____ICSName, value) <> 0) then begin
    self.OnPropertyChanging('ICSName');
    f____ICSName := value;
    self.OnPropertyChanged('ICSName');
  end;
end;

method Events.set_RecurID(value: nullable System.DateTime);
begin
  if (System.Collections.Generic.Comparer<nullable System.DateTime>.Default.Compare(self.f____RecurID, value) <> 0) then begin
    self.OnPropertyChanging('RecurID');
    f____RecurID := value;
    self.OnPropertyChanged('RecurID');
  end;
end;

method Events.set_AllDay(value: System.Boolean);
begin
  if (System.Collections.Generic.Comparer<System.Boolean>.Default.Compare(self.f____AllDay, value) <> 0) then begin
    self.OnPropertyChanging('AllDay');
    f____AllDay := value;
    self.OnPropertyChanged('AllDay');
  end;
end;

method Events.set_TimeZoneInfo(value: System.String);
begin
  if (System.Collections.Generic.Comparer<System.String>.Default.Compare(self.f____TimeZoneInfo, value) <> 0) then begin
    self.OnPropertyChanging('TimeZoneInfo');
    f____TimeZoneInfo := value;
    self.OnPropertyChanged('TimeZoneInfo');
  end;
end;

method Events.set_ETag(value: System.String);
begin
  if (System.Collections.Generic.Comparer<System.String>.Default.Compare(self.f____ETag, value) <> 0) then begin
    self.OnPropertyChanging('ETag');
    f____ETag := value;
    self.OnPropertyChanged('ETag');
  end;
end;

{ Recurrences }

method Recurrences.System_ICloneable_Clone: System.Object;
begin
  var v____new: Recurrences := new Recurrences();
  v____new.f____ID := self.f____ID;
  v____new.f____EventID := self.f____EventID;
  v____new.f____Value := self.f____Value;
  exit(v____new);
end;

method Recurrences.BeginUpdate;
begin
  self.m____OldValues := ((self as System.ICloneable).Clone() as Recurrences);
end;

method Recurrences.EndUpdate(dataAdapter: RemObjects.DataAbstract.Linq.LinqDataAdapter);
begin
  dataAdapter.UpdateRow<Recurrences>(self.m____OldValues, self);
  self.m____OldValues := nil;
end;

method Recurrences.CancelUpdate;
begin
  self.m____OldValues := nil;
end;

method Recurrences.OnPropertyChanging(parameterName: System.String);
begin
  if (self.PropertyChanging <> nil) then begin
    self.PropertyChanging(self, new System.ComponentModel.PropertyChangingEventArgs(parameterName));
  end;
end;

method Recurrences.OnPropertyChanged(parameterName: System.String);
begin
  if ((self.PropertyChanged <> nil) 
        and (self.m____OldValues = nil)) then begin
    self.PropertyChanged(self, new System.ComponentModel.PropertyChangedEventArgs(parameterName));
  end;
end;

method Recurrences.set_ID(value: System.Int64);
begin
  if (System.Collections.Generic.Comparer<System.Int64>.Default.Compare(self.f____ID, value) <> 0) then begin
    self.OnPropertyChanging('ID');
    f____ID := value;
    self.OnPropertyChanged('ID');
  end;
end;

method Recurrences.set_EventID(value: System.Int64);
begin
  if (System.Collections.Generic.Comparer<System.Int64>.Default.Compare(self.f____EventID, value) <> 0) then begin
    self.OnPropertyChanging('EventID');
    f____EventID := value;
    self.OnPropertyChanged('EventID');
  end;
end;

method Recurrences.set_Value(value: System.String);
begin
  if (System.Collections.Generic.Comparer<System.String>.Default.Compare(self.f____Value, value) <> 0) then begin
    self.OnPropertyChanging('Value');
    f____Value := value;
    self.OnPropertyChanged('Value');
  end;
end;

{ DataContext }

constructor DataContext;
begin
end;

end.
